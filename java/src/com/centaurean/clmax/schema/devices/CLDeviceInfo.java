package com.centaurean.clmax.schema.devices;

import com.centaurean.clmax.cache.CLQueryCacheKey;
import com.centaurean.clmax.schema.values.CLValueType;
import com.centaurean.clmax.schema.versions.CLVersion;
import com.centaurean.clmax.schema.versions.CLVersionMatcher;

import static com.centaurean.clmax.schema.values.CLValueType.*;
import static com.centaurean.clmax.schema.versions.CLVersion.*;

/*
 * Copyright (c) 2013, Centaurean software
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Centaurean software nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Centaurean software BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * jetFlow
 *
 * 25/03/13 19:35
 * @author gpnuma
 */
public enum CLDeviceInfo implements CLQueryCacheKey, CLVersionMatcher {
    // OpenCL 1.0
    CL_DEVICE_TYPE(0x1000, BIT_FIELD),
    CL_DEVICE_VENDOR_ID(0x1001, INT),
    CL_DEVICE_MAX_COMPUTE_UNITS(0x1002, INT),
    CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS(0x1003, INT),
    CL_DEVICE_MAX_WORK_GROUP_SIZE(0x1004, SIZE_T),
    CL_DEVICE_MAX_WORK_ITEM_SIZES(0x1005, SIZE_T_ARRAY),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR(0x1006, INT),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT(0x1007, INT),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT(0x1008, INT),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG(0x1009, INT),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT(0x100A, INT),
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE(0x100B, INT),
    CL_DEVICE_MAX_CLOCK_FREQUENCY(0x100C, INT),
    CL_DEVICE_ADDRESS_BITS(0x100D, INT),
    CL_DEVICE_MAX_READ_IMAGE_ARGS(0x100E, INT),
    CL_DEVICE_MAX_WRITE_IMAGE_ARGS(0x100F, INT),
    CL_DEVICE_MAX_MEM_ALLOC_SIZE(0x1010, LONG),
    CL_DEVICE_IMAGE2D_MAX_WIDTH(0x1011, SIZE_T),
    CL_DEVICE_IMAGE2D_MAX_HEIGHT(0x1012, SIZE_T),
    CL_DEVICE_IMAGE3D_MAX_WIDTH(0x1013, SIZE_T),
    CL_DEVICE_IMAGE3D_MAX_HEIGHT(0x1014, SIZE_T),
    CL_DEVICE_IMAGE3D_MAX_DEPTH(0x1015, SIZE_T),
    CL_DEVICE_IMAGE_SUPPORT(0x1016, BOOLEAN),
    CL_DEVICE_MAX_PARAMETER_SIZE(0x1017, SIZE_T),
    CL_DEVICE_MAX_SAMPLERS(0x1018, SIZE_T),
    CL_DEVICE_MEM_BASE_ADDR_ALIGN(0x1019, INT),
    CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE(0x101A, INT),
    CL_DEVICE_SINGLE_FP_CONFIG(0x101B, BIT_FIELD),
    CL_DEVICE_GLOBAL_MEM_CACHE_TYPE(0x101C, BIT_FIELD),
    CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE(0x101D, INT),
    CL_DEVICE_GLOBAL_MEM_CACHE_SIZE(0x101E, LONG),
    CL_DEVICE_GLOBAL_MEM_SIZE(0x101F, LONG),
    CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE(0x1020, LONG),
    CL_DEVICE_MAX_CONSTANT_ARGS(0x1021, INT),
    CL_DEVICE_LOCAL_MEM_TYPE(0x1022, BIT_FIELD),
    CL_DEVICE_LOCAL_MEM_SIZE(0x1023, LONG),
    CL_DEVICE_ERROR_CORRECTION_SUPPORT(0x1024, BOOLEAN),
    CL_DEVICE_PROFILING_TIMER_RESOLUTION(0x1025, SIZE_T),
    CL_DEVICE_ENDIAN_LITTLE(0x1026, BOOLEAN),
    CL_DEVICE_AVAILABLE(0x1027, BOOLEAN),
    CL_DEVICE_COMPILER_AVAILABLE(0x1028, BOOLEAN),
    CL_DEVICE_EXECUTION_CAPABILITIES(0x1029, BOOLEAN),
    CL_DEVICE_QUEUE_PROPERTIES(0x102A, BIT_FIELD),
    CL_DEVICE_NAME(0x102B, CHAR_ARRAY),
    CL_DEVICE_VENDOR(0x102C, CHAR_ARRAY),
    CL_DRIVER_VERSION(0x102D, CHAR_ARRAY),
    CL_DEVICE_PROFILE(0x102E, CHAR_ARRAY),
    CL_DEVICE_VERSION(0x102F, CHAR_ARRAY),
    CL_DEVICE_EXTENSIONS(0x1030, CHAR_ARRAY),
    CL_DEVICE_PLATFORM(0x1031, LONG),

    // OpenCL 1.1
    /* 0x1032 reserved for CL_DEVICE_DOUBLE_FP_CONFIG */
    /* 0x1033 reserved for CL_DEVICE_HALF_FP_CONFIG */
    CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF(0x1034, INT, OPENCL_1_1),
    CL_DEVICE_HOST_UNIFIED_MEMORY(0x1035, BOOLEAN, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR(0x1036, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT(0x1037, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_INT(0x1038, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG(0x1039, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT(0x103A, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE(0x103B, INT, OPENCL_1_1),
    CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF(0x103C, INT, OPENCL_1_1),
    CL_DEVICE_OPENCL_C_VERSION(0x103D, CHAR_ARRAY, OPENCL_1_1),

    // OpenCL 1.2
    CL_DEVICE_DOUBLE_FP_CONFIG(0x1032, BIT_FIELD, OPENCL_1_2),
    /* 0x1033 reserved for CL_DEVICE_HALF_FP_CONFIG */
    CL_DEVICE_LINKER_AVAILABLE(0x103E, INT, OPENCL_1_2),
    CL_DEVICE_BUILT_IN_KERNELS(0x103F, CHAR_ARRAY, OPENCL_1_2),
    CL_DEVICE_IMAGE_MAX_BUFFER_SIZE(0x1040, INT, OPENCL_1_2),
    CL_DEVICE_IMAGE_MAX_ARRAY_SIZE(0x1041, SIZE_T, OPENCL_1_2),
    CL_DEVICE_PARENT_DEVICE(0x1042, LONG, OPENCL_1_2),
    CL_DEVICE_PARTITION_MAX_SUB_DEVICES(0x1043, INT, OPENCL_1_2),
    CL_DEVICE_PARTITION_PROPERTIES(0x1044, LONG_ARRAY, OPENCL_1_2),
    CL_DEVICE_PARTITION_AFFINITY_DOMAIN(0x1045, BIT_FIELD, OPENCL_1_2),
    CL_DEVICE_PARTITION_TYPE(0x1046, LONG_ARRAY, OPENCL_1_2),
    CL_DEVICE_REFERENCE_COUNT(0x1047, INT, OPENCL_1_2),
    CL_DEVICE_PREFERRED_INTEROP_USER_SYNC(0x1048, BOOLEAN, OPENCL_1_2),
    CL_DEVICE_PRINTF_BUFFER_SIZE(0x1049, SIZE_T, OPENCL_1_2),
    CL_DEVICE_IMAGE_PITCH_ALIGNMENT(0x104A, INT, OPENCL_1_2),
    CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT(0x104B, INT, OPENCL_1_2);

    private int key;
    private CLValueType returnType;
    private CLVersion minimumVersion;

    private CLDeviceInfo(int key, CLValueType returnType, CLVersion minimumVersion) {
        this.key = key;
        this.returnType = returnType;
        this.minimumVersion = minimumVersion;
    }

    private CLDeviceInfo(int key, CLValueType returnType) {
        this(key, returnType, OPENCL_1_0);
    }

    @Override
    public int getKey() {
        return key;
    }

    public CLValueType getReturnType() {
        return returnType;
    }

    @Override
    public CLVersion getMinimumCLVersion() {
        return minimumVersion;
    }
}
